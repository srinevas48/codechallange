package com.aig.dcp.nextgen.core.models.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.List;

import org.apache.sling.api.resource.Resource;
import org.apache.sling.testing.mock.sling.ResourceResolverType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.junit.jupiter.api.extension.ExtendWith;

import com.aig.dcp.nextgen.core.models.impl.FilterTagModel.TagBean;

import io.wcm.testing.mock.aem.junit5.AemContext;
import io.wcm.testing.mock.aem.junit5.AemContextExtension;

@ExtendWith({ AemContextExtension.class})
@TestInstance(Lifecycle.PER_CLASS)
class FilterTagModelTest {

	private final AemContext aemContext = new AemContext(ResourceResolverType.RESOURCERESOLVER_MOCK);
	
	private FilterTagModel filterTagModel;
	
	private TagBean tagBean;
	
	private Resource res;
		
	@BeforeEach
	public void setup(AemContext aemContext) throws Exception{
		aemContext.addModelsForClasses(FilterTagModel.class);
		
		aemContext.load().json("/filtertags.json", "/content");
		aemContext.load().json("/dcptags.json", "/content/cq:tags/acs");
		res = aemContext.currentResource("/content/jcr:content/root/container/filters");
		filterTagModel = aemContext.request().adaptTo(FilterTagModel.class);		
		
	}
	
	@Test
	void testTagdetails() throws Exception {
		
		assertNotNull( filterTagModel.getTagList());
		
		List<TagBean> been = filterTagModel.getTagList();
		assertEquals("Standard Tags", been.get(0).getParentTag());
		
		assertEquals("standard-tags", been.get(0).getParentTagID());
		
		assertNotNull(been.get(0).getChildTags());
		
	}	
	
	@Test
	void testgetParentTag() throws Exception {
		
		List<TagBean> been = filterTagModel.getTagList();
		
		assertEquals("Standard Tags", been.get(0).getParentTag());
		
		assertEquals("standard-tags", been.get(0).getParentTagID());
		
		assertNotNull(been.get(0).getChildTags());
		
	}	
	
	@Test
	void testgetParentTagID() throws Exception {
		
		List<TagBean> been = filterTagModel.getTagList();
		
		assertEquals("standard-tags", been.get(0).getParentTagID());
		
		assertNotNull(been.get(0).getChildTags());
		
	}	
	
	@Test
	void testgetChildTags() throws Exception {
		
		List<TagBean> been = filterTagModel.getTagList();
		
		
		assertNotNull(been.get(0).getChildTags());
		
	}	

}
