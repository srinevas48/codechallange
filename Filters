package com.onewellington.core.models;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.annotation.PostConstruct;

import org.apache.commons.lang3.StringUtils;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.models.annotations.DefaultInjectionStrategy;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.Optional;
import org.apache.sling.models.annotations.injectorspecific.ChildResource;
import org.apache.sling.models.annotations.injectorspecific.SlingObject;

import com.day.cq.tagging.Tag;
import com.day.cq.tagging.TagManager;
import com.onewellington.core.models.data.CustomTag;

@Model(adaptables = SlingHttpServletRequest.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
public class FilterTagModel {

	@ChildResource
	@Optional
	public Resource filters;

	@SlingObject
	private ResourceResolver resolver;

	private List<TagBean> tagList = new ArrayList<>();

	@PostConstruct
	public void init() {

		TagManager tagMgr = resolver.adaptTo(TagManager.class);
		if (filters != null) {
			Iterator<Resource> listChildren = filters.listChildren();
			while (listChildren.hasNext()) {
				Resource item = listChildren.next();
				String parentTag = item.getValueMap().get("tags").toString();
				if (StringUtils.isNotEmpty(parentTag)) {
					Tag tag = tagMgr.resolve(parentTag);
					if (null != tag) {
						TagBean tbean = new TagBean();
						String parentTagTitle = tag.getTitle();
						tbean.setParentTag(parentTagTitle);
						tbean.setParentTagID(parentTagTitle.toLowerCase().replaceAll(" ", "-"));
						Iterator<Resource> childTagRes = resolver.getResource(tag.getPath()).listChildren();
						List<CustomTag> childTags = new ArrayList<>();
						while (childTagRes.hasNext()) {
							CustomTag custom = new CustomTag();
							Resource childItem = childTagRes.next();
							Tag childTag = tagMgr.resolve(childItem.getPath());
							if (null != childTag) {
								custom.setTitle(childTag.getTitle());
								custom.setTagID(tag.getName() + "-" + childTag.getName());
							}
							childTags.add(custom);
						}
						tbean.setChildTags(childTags);
						tagList.add(tbean);
					}
				}
			}
		}
	}

	public List<TagBean> getTagList() {
		return tagList;
	}

	public class TagBean {
		private String parentTag;
		private String parentTagID;
		private List<CustomTag> childTags;

		public String getParentTag() {
			return parentTag;
		}

		public void setParentTag(String parentTag) {
			this.parentTag = parentTag;
		}

		public String getParentTagID() {
			return parentTagID;
		}
		
		public void setParentTagID(String parentTagID) {
			this.parentTagID = parentTagID;
		}
		public List<CustomTag> getChildTags() {
			return childTags;
		}

		public void setChildTags(List<CustomTag> childTags) {
			this.childTags = childTags;
		}
	}
}
